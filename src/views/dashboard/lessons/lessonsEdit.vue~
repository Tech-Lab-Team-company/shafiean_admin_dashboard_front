<template>
  <div class="lessons-add">
    <header-pages title="تعديل حلقه" :showButton="false" />
    <form @submit.prevent="updateLessons">
      <div class="row">
        <div class="col-lg-6 col-md-6 col-12">
          <label for="Stages">المرحلة</label>
          <multiselect
            v-model="Stages_values"
            :options="StagesOptions"
            track-by="id"
            label="title"
            :close-on-select="false"
            @update:model-value="updateStagesValue"
          ></multiselect>
          <span class="error-feedback" v-if="v$.lessons.stage_id.$error">
            {{ getErrorMessage(v$.lessons.stage_id) }}
          </span>
        </div>

        <div class="col-lg-6 col-md-6 col-12">
          <label for="">القرأن</label>
          <multiselect
            id="type"
            v-model="selectedType"
            :options="typeOptions"
            :close-on-select="true"
            label="name"
            track-by="id"
            @update:model-value="updateTypeId"
          ></multiselect>
        </div>
        <div class="col-lg-12 col-md-6 col-12">
          <div class="input">
            <label for=""> الوصف</label>
            <textarea
              id="description"
              name="w3review"
              rows="4"
              cols="100"
              placeholder="اسم الحلقه"
              v-model="lessons.title"
            >
            </textarea>
          </div>
        </div>
      </div>

      <div class="all-btn">
        <button type="submit" class="save" @click="Edit()">تعديل</button>
        <button type="button" class="bake" @click="$router.go(-1)">رجوع</button>
      </div>
    </form>
  </div>
</template>

<script>
import HeaderPages from "@/components/headerpages/HeaderPages.vue";
import { useLessonsEditStore } from "@/stores/lessons/LessonsEditStore";
import "vue-multiselect/dist/vue-multiselect.css";
import Multiselect from "vue-multiselect";
import { mapState } from "pinia";
import Swal from "sweetalert2";

import useVuelidate from "@vuelidate/core";
import { required } from "@vuelidate/validators";

export default {
  components: { HeaderPages, Multiselect },
  data() {
    return {
      v$: useVuelidate(),
      lessons: {
        title: "",
        // start_verse: "",
        // end_verse: "",
        stage_id: "",
        quraan_id: "",
      },
      StagesOptions: [],
      Stages_values: {},
      typeOptions: [
        { id: 1, name: "قرأن" },
        { id: 2, name: "حديث" },
        { id: 3, name: "فقه" },
      ],
      selectedType: null,
    };
  },
  validations() {
    return {
      lessons: {
        title: { required },
        // start_verse: { required },
        // end_verse: { required },
        stage_id: { required },
        // quraan_id: { required },
      },
    };
  },
  computed: {
    ...mapState(useLessonsEditStore, {
      lessons: (state) => state.lessons,
    }),
  },
  methods: {
    getErrorMessage(field) {
      if (field.$invalid && field.$dirty) {
        return "هذا الحقل مطلوب";
      }
      return "";
    },
    updateStagesValue() {
      this.lessons.stage_id = this.Stages_values ? this.Stages_values.id : null;
      console.log("Updated Stage ID:", this.lessons.stage_id);
    },
    updateTypeId(selectedOption) {
      this.lessons.quraan_id = selectedOption ? selectedOption.id : null;
    },
    async fetchData() {
      const store = useLessonsEditStore();
      const id = this.$route.params.id;
      await store.fetchLessons(id);
      await store.fetchSteps();
      this.StagesOptions = store.lesson; // Assuming this is correct
      this.lessons = store.lessons;
      console.log(
        this.lessons.stage.title,
        "this.lessonssssssssssssssssssssssss"
      );
      this.Stages_values = this.lessons.stage
        ? {
            id: this.lessons.stage.id,
            title: this.lessons.stage.title,
          }
        : null;
    },
    async updateLessons() {
      console.log("stage_id", this.lessons.stage_id);

      if (
        !this.lessons.title ||
        !this.lessons.stage_id
        // !this.lessons.quraan_id
      ) {
        // Swal.fire("Error", "Please fill in all fields", "error");
        return;
      }

      const store = useLessonsEditStore();
      const id = this.$route.params.id;

      console.log("Payload being sent:", this.lessons); // Debugging payload

      try {
        await store.updateLessons(id, this.lessons); // Sending the request
        Swal.fire("Success", "Lesson updated successfully", "success");
        this.$router.go(-1);
      } catch (error) {
        console.error("Error details:", error); // Detailed logging of the error
        console.error("Response data:", error.response?.data); // API response
        Swal.fire(
          "Error",
          error.response?.data.message || "Update failed",
          "error"
        );
      }
    },

    Edit() {
      this.v$.$validate();
      if (!this.v$.$error) {
        console.log("lessons");
        // this.updateLessons();
      }
    },
  },
  mounted() {
    this.fetchData();
  },
  watch: {
    Stages_values(newVal) {
      this.lessons.stage_id = newVal ? newVal.id : null;
      console.log("Updated via watcher:", this.lessons.stage_id);
    },
  },
};
</script>
<style scoped>
.error-feedback {
  color: red;
  font-size: 0.85rem;
}
textarea {
  border: 1px solid #06797e;
  border-radius: 5px;
  padding: 10px;
  width: 100%;
  margin-bottom: 10px;
}
</style>
